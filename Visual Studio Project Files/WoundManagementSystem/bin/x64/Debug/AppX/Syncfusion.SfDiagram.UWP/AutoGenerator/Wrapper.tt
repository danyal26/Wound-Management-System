<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#
	var doc = new System.Xml.XmlDocument();
	string filePath = this.Host.TemplateFile;
	filePath = filePath.Substring(0, filePath.LastIndexOf("\\")) + "\\DependencyProperties.xml";
	doc.Load(filePath);
	string nameSP = "Syncfusion.UI.Xaml.Diagram";
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
#if SURFACE
using System.Threading.Tasks;
using Windows.UI;
using Windows.UI.Xaml;
using Windows.Foundation;
using Windows.UI.Xaml.Media; 
#else
using System.Windows.Media; 
#endif
using Syncfusion.UI.Xaml.Diagram.Controls;
using Syncfusion.UI.Xaml.Diagram.Utility;
using Syncfusion.UI.Xaml.Diagram.Layout;
using Syncfusion.UI.Xaml.Diagram.Controller;
using System.Windows.Input;
namespace <#=nameSP#>
{
<#
	foreach (XmlElement clas in doc.SelectNodes("//Class"))
            {
				string ClassName = clas.Attributes["Name"].Value;
				string ToWrap = "";
				if(clas.Attributes["ToWrap"] != null)
                {
					ToWrap = clas.Attributes["ToWrap"].Value;
                }
				string Gen = "";
				if(clas.Attributes["Gen"] != null)
                {
					Gen = "<" + clas.Attributes["Gen"].Value + ToWrap+">";
                }
				bool ignore = GetBool(clas, "IgnoreWrap", false);
				if(!ignore)
                {
#>
	internal partial class <#=ClassName#>Wrapper<#=Gen#>
	{
<#
	foreach (XmlElement prop in clas.SelectNodes("Property"))
    {
		string propertyName = prop.Attributes["Name"].Value;
		string propertyType = prop.Attributes["Type"].Value;
		string propertyValue = prop.Attributes["DefaultValue"].Value;
		bool Explicit = GetBool(prop, "Explicit", false);
		string InterfaceType = GetString(prop, "InterfaceName") + "<"+GetString(prop, "InterfaceGen")+">.";		
		string conditionalCompilation=GetString(prop,"ConditionalCompilationSymbol");
		bool Symbol=GetBool(prop,"ConditionalCompilation",false);
		bool Get = GetBool(prop, "CanGet", true);
		bool Set = GetBool(prop, "CanSet", true);
		string PropGen = "";
		if(prop.Attributes["Gen"] != null)
        {
			PropGen = "<" + prop.Attributes["Gen"].Value +">";
        }
		bool CanWrap = GetBool(prop, "CanWrap", true);
		bool GenType = GetBool(prop, "GenType", false);
		bool Unit = GetBool(prop, "Unit", false);
		bool Internal = GetBool(prop, "Internal", false);
		bool NotifyChangeW = GetBool(prop, "NotifyChangeW", true);
		string SourceType = GetString(prop, "SourceType");
		
		if(CanWrap)
        {
#>

  <#
		if(conditionalCompilation!=string.Empty)
		{		
		#>
   #if <#=conditionalCompilation#>		
		<#
		}
		#>
		<#=propertyType#><#=PropGen#> _m<#=propertyName#> = <#=propertyValue#>;
		public <#=propertyType#><#=PropGen#> <#=propertyName#>
        {
<#if(Get && !Internal)
  {#>
            get
            {
				<#=propertyType#><#=PropGen#> returnValue;
				if(_mSource is <#=SourceType#>)
				{
                    returnValue = (_mSource as <#=SourceType#>).<#=propertyName#>;
				}
                else if(TryGetValue(<#=ClassName#>Constants.<#=propertyName#>, out returnValue))
				{
				}
				else
                {
                    returnValue = _m<#=propertyName#>;
                }
<#if(Unit){#>
				return SharedData.Unit.ToPixel(returnValue);
<#}else{#>
				return returnValue;
<#}#>
            }
<#}#>
<#if(Set && !Internal)
  {
#>
            set
            {
<#if(Unit){#>
				value = SharedData.Unit.ToUnit(value);
<#}#>
                if(_mSource is <#=SourceType#>)
                {
                    (_mSource as <#=SourceType#>).<#=propertyName#> = value;
                }
                else if(SetValue(<#=ClassName#>Constants.<#=propertyName#>, value))
				{
				}
<#if(GenType)
  {
#>
				else if(_m<#=propertyName#> == null || !_m<#=propertyName#>.Equals(value))
<#}else{#>
				else if(_m<#=propertyName#> != value)
<#}#>
                {
                    _m<#=propertyName#> = value;
                    OnPropertyChanged(<#=ClassName#>Constants.<#=propertyName#>);
                }
            }
<#}#>
<#if(Internal)
  {
#>
			get
			{
				return _m<#=propertyName#>;
			}
			set
			{
<#if(GenType)
  {
#>
				if(_m<#=propertyName#> == null || !_m<#=propertyName#>.Equals(value))
<#}else{#>
				if(_m<#=propertyName#> != value)
<#}#>
				{
					_m<#=propertyName#> = value;
<#if(NotifyChangeW)
{#>
					OnPropertyChanged(<#=ClassName#>Constants.<#=propertyName#>);
<#}#>
				}
			}
<#}#>
        }
		<#
	if(conditionalCompilation!=string.Empty)
	{
	#>
#endif
	<#
     }
    #>
<#
        }

		
    }
#>
	}
<#
                }
            }
#>
}
<#+
			public string GetString(XmlElement element, string property)
            {
				if( element.Attributes[property] != null)
					{
						return element.Attributes[property].Value;
                    }
					else
                    {
						return "";
                    }
            }

			public bool GetBool(XmlElement element, string property, bool retu)
            {
				if( element.Attributes[property] != null)
					{
						string ret = element.Attributes[property].Value;
						return bool.Parse(ret);
						}
					else
                    {
						return retu;
                    }
            }
#>