<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#
	var doc = new System.Xml.XmlDocument();
	string filePath = this.Host.TemplateFile;
	filePath = filePath.Substring(0, filePath.LastIndexOf("\\")) + "\\DependencyProperties.xml";
	doc.Load(filePath);
	string nameSP = "Syncfusion.UI.Xaml.Diagram";
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using System.Collections;
using System.Windows;
#if SURFACE
using System.Threading.Tasks;
using Windows.Foundation;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Data;
#else
using System.Windows.Media;  
#endif
using Syncfusion.UI.Xaml.Diagram.Utility;
using Syncfusion.UI.Xaml.Diagram.Layout;
using Syncfusion.UI.Xaml.Diagram.Controls;
using Syncfusion.UI.Xaml.Diagram.Controller;
using System.Windows.Input;
namespace <#=nameSP#>
{
<#
	foreach (XmlElement clas in doc.SelectNodes("//Class"))
            {
				string ClassName = clas.Attributes["Name"].Value;
				string Gen = "";
				if(clas.Attributes["Gen"] != null)
                {
					Gen = "<" + clas.Attributes["Gen"].Value +">";
                }
				bool DependencyProperties = GetBool(clas, "DependencyProperties", true);
				if(DependencyProperties)
                {
#>

	public partial class <#=ClassName#><#=Gen#> : <#

foreach (XmlElement interfac in clas.SelectNodes("Interface"))
{
	string interfaceName = interfac.Attributes["Name"].Value;
	string interfaceGen = GetString(interfac, "Gen");
	if(!string.IsNullOrEmpty(interfaceGen))
    {
		interfaceGen = "<"+ interfaceGen +">";
	}
	#> <#=interfaceName#><#=interfaceGen#>
<#

}
#>
	{
<#
	foreach (XmlElement prop in clas.SelectNodes("Property"))
    {
		string propertyName = prop.Attributes["Name"].Value;
		string propertyType = prop.Attributes["Type"].Value;
		string propertyValue = prop.Attributes["DefaultValue"].Value;	
		string propertyDescription=GetString(prop,"Description");	
		string propertyObsolete=GetString(prop,"Obsolete");
		bool Explicit = GetBool(prop, "Explicit", false);
		string InterfaceType = GetString(prop, "InterfaceName");
		string conditionalCompilation=GetString(prop,"ConditionalCompilationSymbol");		
		bool Get = GetBool(prop, "CanGet", true);
		bool Set = GetBool(prop, "CanSet", true);
		string Gen1 = "";
		if(prop.Attributes["Gen"] != null)
        {
			Gen1 = "<" + prop.Attributes["Gen"].Value +">";
        }
		bool Internal = GetBool(prop, "Internal", false);
		bool DependencyProperty = GetBool(prop, "DependencyProperty", true);
		if(!Internal && DependencyProperty)
        {
#>
        #region <#=propertyName#>

		<#
		if(conditionalCompilation!=string.Empty)
		{		
		#>
  #if <#=conditionalCompilation#>		
		<#
		}
		#>
 ///<summary> 			 
		 ///<#=propertyDescription#>	
		 ///</summary>
<#
if(propertyObsolete!=string.Empty)
{
#>
		 [Obsolete("<#=propertyObsolete#>")]
<#
}
#>
		<#if(!Explicit){#>public<#}#> <#=propertyType#><#=Gen1#> <#if(Explicit){#><#=InterfaceType#>.<#}#><#=propertyName#>
        {
<#
if(Get)
{
#>
            get { return (<#=propertyType#><#=Gen1#>)GetValue(<#=propertyName#>Property); }
<#
}
if(Set)
{
#>
            set { SetValue(<#=propertyName#>Property, value); }
<#
}
#>
        }

		public static readonly DependencyProperty <#=propertyName#>Property =
            DependencyProperty.Register(<#=ClassName#>Constants.<#=propertyName#>, typeof(<#=propertyType#><#=Gen1#>), typeof(<#=ClassName#><#=Gen#>), new PropertyMetadata(<#=propertyValue#>, On<#=propertyName#>Changed));

        private static void On<#=propertyName#>Changed(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            (d as <#=ClassName#><#=Gen#>).On<#=propertyName#>Changed(e);
        }	
	<#
	if(conditionalCompilation!=string.Empty)
	{
	#>
	#endif
	<#
     }
    #>

    #endregion

<#
        }
}
#>
<#
	foreach (XmlElement prop in clas.SelectNodes("Property"))
    {
		break;
		string propertyName = prop.Attributes["Name"].Value;
		string propertyType = prop.Attributes["Type"].Value;
		string propertyValue = prop.Attributes["DefaultValue"].Value;
		string propertyDescription=GetString(prop,"Description");	
		bool Get = GetBool(prop, "CanGet", true);
		bool Set = GetBool(prop, "CanSet", true);
		
		string Gen2 = "";
		if(prop.Attributes["Gen"] != null)
        {
			Gen2 = "<" + prop.Attributes["Gen"].Value +">";
        }
		
#>
        private void On<#=propertyName#>Changed(DependencyPropertyChangedEventArgs e)
        {
		<#=propertyType#><#=Gen2#> oldValue = (<#=propertyType#><#=Gen2#>)e.OldValue;
		<#=propertyType#><#=Gen2#> newValue = (<#=propertyType#><#=Gen2#>)e.NewValue;
        }
		<#}#>
	}
<#
                }
            }
#>
}
<#+
			public string GetString(XmlElement element, string property)
            {
				if( element.Attributes[property] != null)
					{
						return element.Attributes[property].Value;
						}
					else
                    {
						return string.Empty;
                    }
           }

			public bool GetBool(XmlElement element, string property, bool retu)
            {
				if( element.Attributes[property] != null)
					{
						string ret = element.Attributes[property].Value;
						return bool.Parse(ret);
						}
					else
                    {
						return retu;
                    }
           }
#>