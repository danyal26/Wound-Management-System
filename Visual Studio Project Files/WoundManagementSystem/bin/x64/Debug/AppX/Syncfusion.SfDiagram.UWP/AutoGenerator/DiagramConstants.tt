<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#
	var doc = new System.Xml.XmlDocument();
	string filePath = this.Host.TemplateFile;
	filePath = filePath.Substring(0, filePath.LastIndexOf("\\")) + "\\DependencyProperties.xml";
	doc.Load(filePath);
	string nameSP = "Syncfusion.UI.Xaml.Diagram";
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
#if SURFACE
using System.Threading.Tasks;
using Windows.UI.Xaml; 
#endif
using System.Windows;
using Syncfusion.UI.Xaml.Diagram.Controls;
using Syncfusion.UI.Xaml.Diagram.Utility;
using Syncfusion.UI.Xaml.Diagram.Controller;
using System.Windows.Input;
namespace <#=nameSP#>
{
<#
	foreach (XmlElement clas in doc.SelectNodes("//Class"))
            {
				string ClassName = clas.Attributes["Name"].Value;				
				bool ignore = GetBool(clas, "IgnoreConstants", false);
				//if(!ignore)
                {
#>
	internal static class <#=ClassName#>Constants
	{
<#
	foreach (XmlElement prop in clas.SelectNodes("Property"))
    {
		string propertyName = prop.Attributes["Name"].Value;
		string propertyType = prop.Attributes["Type"].Value;
		string propertyValue = prop.Attributes["DefaultValue"].Value;
		bool Explicit = GetBool(prop, "Explicit", false);
		string InterfaceType = GetString(prop, "InterfaceName") + "<"+GetString(prop, "InterfaceGen")+">.";
		bool Get = GetBool(prop, "CanGet", true);
		bool Set = GetBool(prop, "CanSet", true);
		bool Internal = GetBool(prop, "Internal", true);
		string Gen1 = "";
		if(prop.Attributes["Gen"] != null)
        {
			Gen1 = "<" + prop.Attributes["Gen"].Value +">";
        }
		
#>
        public const string <#=propertyName#> = "<#=propertyName#>";
<#
}
#>
		public static List<Tuple<DependencyProperty, string>> <#=ClassName#>Properties = new List<Tuple<DependencyProperty, string>>()
        {
<#
	foreach (XmlElement prop in clas.SelectNodes("Property"))
    {
		string propertyName = prop.Attributes["Name"].Value;
		string propertyType = prop.Attributes["Type"].Value;
		string propertyValue = prop.Attributes["DefaultValue"].Value;
		string conditionalCompilation=GetString(prop,"ConditionalCompilationSymbol");
		bool Get = GetBool(prop, "CanGet", true);
		bool Set = GetBool(prop, "CanSet", true);
		bool CanBind = GetBool(prop, "CanBind", true);
		bool IgnoreBindingConstants = GetBool(prop, "IgnoreBindingConstants", false);
		if(CanBind && !IgnoreBindingConstants)
        {
#>
<#
		if(conditionalCompilation!=string.Empty)
		{		
		#>
  #if <#=conditionalCompilation#>		
		<#
		}
		#>
			new Tuple<DependencyProperty, string>(<#=ClassName#>.<#=propertyName#>Property, <#=propertyName#>),
			<#if(conditionalCompilation!=string.Empty)
	{
	#>
	#endif
	<#
     }
    #>
<#
		}
	}#>
		};
	}
<#
                }
            }
#>
}
<#+
			public string GetString(XmlElement element, string property)
            {
				if( element.Attributes[property] != null)
					{
						return element.Attributes[property].Value;
                    }
					else
                    {
						return "";
                    }
            }

			public bool GetBool(XmlElement element, string property, bool retu)
            {
				if( element.Attributes[property] != null)
					{
						string ret = element.Attributes[property].Value;
						return bool.Parse(ret);
						}
					else
                    {
						return retu;
                    }
            }
#>